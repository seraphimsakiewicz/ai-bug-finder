import { Bug } from "@/types/bug";

export const mockBugs: Bug[] = [
  {
    id: "1",
    title: "SQL Injection Vulnerability",
    description:
      "User input directly concatenated into SQL query without sanitization",
    bugLines: [15, 17],
    filePath: "src/controllers/userController.ts",
    fullCode: [
      "import express from 'express';",
      "import { db } from '../database';",
      "const router = express.Router();",
      "",
      "interface User {",
      "  id: string;",
      "  name: string;",
      "  email: string;",
      "}",
      "",
      "// Get user by ID",
      "router.get('/user/:id', async (req, res) => {",
      "  try {",
      "    const userId = req.params.id;",
      "    const query = `SELECT * FROM users WHERE id = ${userId}`;",
      "    const result = await db.query(query);",
      "    const user = result.rows[0];",
      "    ",
      "    if (!user) {",
      "      return res.status(404).json({ error: 'User not found' });",
      "    }",
      "    ",
      "    res.json(user);",
      "  } catch (error) {",
      "    res.status(500).json({ error: 'Internal server error' });",
      "  }",
      "});",
      "",
      "export default router;",
    ],
  },
  {
    id: "2",
    title: "XSS Vulnerability in Component",
    description:
      "User input rendered with dangerouslySetInnerHTML without sanitization",
    bugLines: [12, 12],
    filePath: "src/components/UserProfile.tsx",
    fullCode: [
      "import React from 'react';",
      "",
      "interface UserProfileProps {",
      "  user: {",
      "    name: string;",
      "    bio: string;",
      "    email: string;",
      "  };",
      "}",
      "",
      "const UserProfile: React.FC<UserProfileProps> = ({ user }) => {",
      "  return (",
      '    <div className="profile">',
      "      <h1>Welcome, <span dangerouslySetInnerHTML={{ __html: user.name }} />!</h1>",
      "      <p>Email: {user.email}</p>",
      '      <div className="bio">',
      "        <h3>Bio:</h3>",
      "        <p>{user.bio}</p>",
      "      </div>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default UserProfile;",
    ],
  },
  {
    id: "3",
    title: "Hardcoded API Key",
    description:
      "API key exposed in source code instead of using environment variables",
    bugLines: [5, 5],
    filePath: "src/services/paymentService.ts",
    fullCode: [
      "import axios from 'axios';",
      "",
      "class PaymentService {",
      "  private apiKey: string;",
      "  private baseURL = 'https://api.stripe.com/v1';",
      "",
      "  constructor() {",
      "    this.apiKey = 'sk_live_abc123def456ghi789';",
      "  }",
      "",
      "  async createPayment(amount: number, currency: string) {",
      "    const response = await axios.post(`${this.baseURL}/payment_intents`, {",
      "      amount,",
      "      currency",
      "    }, {",
      "      headers: {",
      "        'Authorization': `Bearer ${this.apiKey}`,",
      "        'Content-Type': 'application/json'",
      "      }",
      "    });",
      "",
      "    return response.data;",
      "  }",
      "}",
      "",
      "export default PaymentService;",
    ],
  },
  {
    id: "4",
    title: "Missing Authentication Check",
    description:
      "Admin endpoint accessible without proper authentication verification",
    bugLines: [8, 14],
    filePath: "src/routes/admin.ts",
    fullCode: [
      "import express from 'express';",
      "import { User } from '../models/User';",
      "const router = express.Router();",
      "",
      "interface AdminRequest extends express.Request {",
      "  user?: { role: string; id: string };",
      "}",
      "",
      "// Admin dashboard",
      "router.get('/dashboard', (req: AdminRequest, res) => {",
      "  // TODO: Add authentication check",
      "  res.json({",
      "    title: 'Admin Dashboard',",
      "    users: User.findAll()",
      "  });",
      "});",
      "",
      "// Delete user endpoint",
      "router.delete('/users/:id', async (req, res) => {",
      "  const userId = req.params.id;",
      "  await User.destroy({ where: { id: userId } });",
      "  res.json({ success: true });",
      "});",
      "",
      "export default router;",
    ],
  },
  {
    id: "5",
    title: "Weak Password Validation",
    description:
      "Password complexity requirements are insufficient for security",
    bugLines: [8, 10],
    filePath: "src/utils/validation.ts",
    fullCode: [
      "import validator from 'validator';",
      "",
      "interface ValidationResult {",
      "  isValid: boolean;",
      "  errors: string[];",
      "}",
      "",
      "export const validatePassword = (password: string): ValidationResult => {",
      "  const errors: string[] = [];",
      "  ",
      "  if (!password || password.length < 4) {",
      "    errors.push('Password must be at least 4 characters long');",
      "  }",
      "  ",
      "  return {",
      "    isValid: errors.length === 0,",
      "    errors",
      "  };",
      "};",
      "",
      "export const validateUser = (userData: { email: string; password: string }): ValidationResult => {",
      "  const errors: string[] = [];",
      "  ",
      "  if (!validator.isEmail(userData.email)) {",
      "    errors.push('Invalid email format');",
      "  }",
      "  ",
      "  const passwordResult = validatePassword(userData.password);",
      "  errors.push(...passwordResult.errors);",
      "  ",
      "  return {",
      "    isValid: errors.length === 0,",
      "    errors",
      "  };",
      "};",
    ],
  },
  {
    id: "6",
    title: "Race Condition in State Update",
    description:
      "Non-atomic state update can lead to race condition in React component",
    bugLines: [15, 17],
    filePath: "src/components/Counter.tsx",
    fullCode: [
      "import React, { useState, useCallback } from 'react';",
      "",
      "interface CounterProps {",
      "  initialValue?: number;",
      "}",
      "",
      "const Counter: React.FC<CounterProps> = ({ initialValue = 0 }) => {",
      "  const [count, setCount] = useState(initialValue);",
      "  const [loading, setLoading] = useState(false);",
      "",
      "  const incrementAsync = useCallback(async () => {",
      "    setLoading(true);",
      "    // Simulate async operation",
      "    setTimeout(() => {",
      "      const currentCount = count;",
      "      setCount(currentCount + 1);",
      "      setLoading(false);",
      "    }, 100);",
      "  }, [count]);",
      "",
      "  return (",
      "    <div>",
      "      <h2>Count: {count}</h2>",
      "      <button onClick={incrementAsync} disabled={loading}>",
      "        {loading ? 'Loading...' : 'Increment'}",
      "      </button>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default Counter;",
    ],
  },
  {
    id: "7",
    title: "Insecure Random Number Generation",
    description: "Using Math.random() for security-sensitive token generation",
    bugLines: [9, 9],
    filePath: "src/auth/tokenGenerator.ts",
    fullCode: [
      "interface TokenOptions {",
      "  length?: number;",
      "  includeSpecialChars?: boolean;",
      "}",
      "",
      "export class TokenGenerator {",
      "  static generateSecureToken(options: TokenOptions = {}): string {",
      "    const { length = 32, includeSpecialChars = false } = options;",
      "    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
      "    let result = '';",
      "",
      "    for (let i = 0; i < length; i++) {",
      "      result += characters.charAt(Math.floor(Math.random() * characters.length));",
      "    }",
      "",
      "    return result;",
      "  }",
      "",
      "  static generateSessionId(): string {",
      "    return this.generateSecureToken({ length: 64 });",
      "  }",
      "",
      "  static generateAPIKey(): string {",
      "    return 'api_' + this.generateSecureToken({ length: 40 });",
      "  }",
      "}",
    ],
  },
  {
    id: "8",
    title: "Memory Leak in useEffect",
    description: "Event listener not cleaned up, causing potential memory leak",
    bugLines: [12, 18],
    filePath: "src/hooks/useWindowSize.tsx",
    fullCode: [
      "import { useState, useEffect } from 'react';",
      "",
      "interface WindowSize {",
      "  width: number;",
      "  height: number;",
      "}",
      "",
      "export const useWindowSize = (): WindowSize => {",
      "  const [windowSize, setWindowSize] = useState<WindowSize>({",
      "    width: window.innerWidth,",
      "    height: window.innerHeight,",
      "  });",
      "",
      "  useEffect(() => {",
      "    const handleResize = () => {",
      "      setWindowSize({",
      "        width: window.innerWidth,",
      "        height: window.innerHeight,",
      "      });",
      "    };",
      "",
      "    window.addEventListener('resize', handleResize);",
      "    // Missing cleanup!",
      "  }, []);",
      "",
      "  return windowSize;",
      "};",
    ],
  },
  {
    id: "9",
    title: "Prototype Pollution Vulnerability",
    description: "User input merged into object without proper sanitization",
    bugLines: [8, 10],
    filePath: "src/utils/configMerger.ts",
    fullCode: [
      "interface Config {",
      "  [key: string]: any;",
      "}",
      "",
      "export class ConfigMerger {",
      "  static merge(target: Config, source: Config): Config {",
      "    for (const key in source) {",
      "      if (typeof source[key] === 'object' && source[key] !== null) {",
      "        target[key] = target[key] || {};",
      "        this.merge(target[key], source[key]);",
      "      } else {",
      "        target[key] = source[key];",
      "      }",
      "    }",
      "    return target;",
      "  }",
      "",
      "  static mergeUserConfig(userInput: any): Config {",
      "    const defaultConfig = { theme: 'light', lang: 'en' };",
      "    return this.merge(defaultConfig, userInput);",
      "  }",
      "}",
    ],
  },
  {
    id: "10",
    title: "Unvalidated Redirect",
    description: "Redirect URL not validated, allowing open redirect attacks",
    bugLines: [12, 12],
    filePath: "src/controllers/authController.ts",
    fullCode: [
      "import express from 'express';",
      "import jwt from 'jsonwebtoken';",
      "",
      "export class AuthController {",
      "  static async login(req: express.Request, res: express.Response) {",
      "    const { username, password, redirectUrl } = req.body;",
      "",
      "    try {",
      "      // Authenticate user (simplified)",
      "      if (username === 'admin' && password === 'password') {",
      "        const token = jwt.sign({ username }, 'secret');",
      "        res.cookie('token', token);",
      "        return res.redirect(redirectUrl || '/dashboard');",
      "      }",
      "",
      "      res.status(401).json({ error: 'Invalid credentials' });",
      "    } catch (error) {",
      "      res.status(500).json({ error: 'Login failed' });",
      "    }",
      "  }",
      "",
      "  static logout(req: express.Request, res: express.Response) {",
      "    res.clearCookie('token');",
      "    res.redirect('/login');",
      "  }",
      "}",
    ],
  },
  {
    id: "11",
    title: "Missing Input Validation",
    description:
      "User input not validated before processing, potential for injection attacks",
    bugLines: [10, 12],
    filePath: "src/api/searchController.ts",
    fullCode: [
      "import express from 'express';",
      "import { db } from '../database';",
      "",
      "interface SearchQuery {",
      "  term: string;",
      "  limit?: number;",
      "  offset?: number;",
      "}",
      "",
      "export const searchUsers = async (req: express.Request, res: express.Response) => {",
      "  const { term, limit, offset } = req.query as any;",
      "",
      "  const query = `",
      "    SELECT * FROM users ",
      "    WHERE name LIKE '%${term}%' ",
      "    LIMIT ${limit || 10} ",
      "    OFFSET ${offset || 0}",
      "  `;",
      "",
      "  try {",
      "    const results = await db.query(query);",
      "    res.json(results.rows);",
      "  } catch (error) {",
      "    res.status(500).json({ error: 'Search failed' });",
      "  }",
      "};",
    ],
  },
  {
    id: "12",
    title: "Sensitive Data in Console Logs",
    description: "User credentials and sensitive data logged to console",
    bugLines: [14, 16],
    filePath: "src/middleware/authMiddleware.ts",
    fullCode: [
      "import jwt from 'jsonwebtoken';",
      "import express from 'express';",
      "",
      "interface AuthRequest extends express.Request {",
      "  user?: any;",
      "}",
      "",
      "export const authenticateToken = (req: AuthRequest, res: express.Response, next: express.NextFunction) => {",
      "  const authHeader = req.headers['authorization'];",
      "  const token = authHeader && authHeader.split(' ')[1];",
      "",
      "  if (!token) {",
      "    console.log('No token provided:', req.headers);",
      "    console.log('Request body:', req.body);",
      "    console.log('User credentials:', req.body.username, req.body.password);",
      "    return res.sendStatus(401);",
      "  }",
      "",
      "  jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret', (err: any, user: any) => {",
      "    if (err) return res.sendStatus(403);",
      "    req.user = user;",
      "    next();",
      "  });",
      "};",
    ],
  },
  {
    id: "13",
    title: "Improper Error Handling",
    description:
      "Stack traces exposed to client, revealing internal system information",
    bugLines: [15, 17],
    filePath: "src/middleware/errorHandler.ts",
    fullCode: [
      "import express from 'express';",
      "",
      "interface CustomError extends Error {",
      "  statusCode?: number;",
      "  code?: string;",
      "}",
      "",
      "export const errorHandler = (err: CustomError, req: express.Request, res: express.Response, next: express.NextFunction) => {",
      "  console.error('Error occurred:', err);",
      "",
      "  if (res.headersSent) {",
      "    return next(err);",
      "  }",
      "",
      "  res.status(err.statusCode || 500).json({",
      "    error: err.message,",
      "    stack: err.stack,",
      "    details: err",
      "  });",
      "};",
      "",
      "export const asyncHandler = (fn: Function) => (req: express.Request, res: express.Response, next: express.NextFunction) => {",
      "  Promise.resolve(fn(req, res, next)).catch(next);",
      "};",
    ],
  },
  {
    id: "14",
    title: "Insecure Direct Object Reference",
    description: "User can access other users' data by modifying ID parameter",
    bugLines: [9, 11],
    filePath: "src/controllers/profileController.ts",
    fullCode: [
      "import express from 'express';",
      "import { User } from '../models/User';",
      "",
      "interface AuthRequest extends express.Request {",
      "  user?: { id: string; role: string };",
      "}",
      "",
      "export const getProfile = async (req: AuthRequest, res: express.Response) => {",
      "  const userId = req.params.id;",
      "",
      "  const user = await User.findById(userId);",
      "",
      "  if (!user) {",
      "    return res.status(404).json({ error: 'User not found' });",
      "  }",
      "",
      "  res.json({",
      "    id: user.id,",
      "    username: user.username,",
      "    email: user.email,",
      "    profile: user.profile",
      "  });",
      "};",
    ],
  },
  {
    id: "15",
    title: "Missing CSRF Protection",
    description: "State-changing operation without CSRF token validation",
    bugLines: [8, 16],
    filePath: "src/routes/userRoutes.ts",
    fullCode: [
      "import express from 'express';",
      "import { User } from '../models/User';",
      "import { authenticateToken } from '../middleware/authMiddleware';",
      "",
      "const router = express.Router();",
      "",
      "// Update user profile",
      "router.put('/profile', authenticateToken, async (req: any, res) => {",
      "  const { name, email, bio } = req.body;",
      "  const userId = req.user.id;",
      "",
      "  try {",
      "    await User.update(userId, {",
      "      name,",
      "      email,",
      "      bio",
      "    });",
      "",
      "    res.json({ success: true, message: 'Profile updated' });",
      "  } catch (error) {",
      "    res.status(500).json({ error: 'Update failed' });",
      "  }",
      "});",
      "",
      "export default router;",
    ],
  },
  {
    id: "16",
    title: "Unsafe eval() Usage",
    description:
      "Dynamic code execution with user input creates code injection risk",
    bugLines: [12, 12],
    filePath: "src/utils/calculator.ts",
    fullCode: [
      "interface CalculationResult {",
      "  result: number;",
      "  expression: string;",
      "}",
      "",
      "export class Calculator {",
      "  static evaluate(expression: string): CalculationResult {",
      "    // Basic validation",
      "    if (!expression || expression.length > 100) {",
      "      throw new Error('Invalid expression');",
      "    }",
      "",
      "    const result = eval(expression);",
      "",
      "    return {",
      "      result: Number(result),",
      "      expression",
      "    };",
      "  }",
      "",
      "  static calculateTax(income: number, rate: string): number {",
      "    const formula = `${income} * ${rate}`;",
      "    return this.evaluate(formula).result;",
      "  }",
      "}",
    ],
  },
  {
    id: "17",
    title: "Infinite Loop Risk",
    description:
      "Recursive function without proper base case could cause stack overflow",
    bugLines: [8, 12],
    filePath: "src/utils/treeTraversal.ts",
    fullCode: [
      "interface TreeNode {",
      "  id: string;",
      "  children?: TreeNode[];",
      "  parent?: TreeNode;",
      "}",
      "",
      "export class TreeTraversal {",
      "  static findPath(node: TreeNode, targetId: string): string[] {",
      "    if (node.id === targetId) {",
      "      return [node.id];",
      "    }",
      "",
      "    if (node.children) {",
      "      for (const child of node.children) {",
      "        const path = this.findPath(child, targetId);",
      "        if (path.length > 0) {",
      "          return [node.id, ...path];",
      "        }",
      "      }",
      "    }",
      "",
      "    return [];",
      "  }",
      "",
      "  static countNodes(node: TreeNode): number {",
      "    let count = 1;",
      "    if (node.children) {",
      "      for (const child of node.children) {",
      "        count += this.countNodes(child);",
      "      }",
      "    }",
      "    return count;",
      "  }",
      "}",
    ],
  },
  {
    id: "18",
    title: "Missing Rate Limiting",
    description:
      "API endpoint vulnerable to brute force attacks without rate limiting",
    bugLines: [7, 19],
    filePath: "src/controllers/loginController.ts",
    fullCode: [
      "import express from 'express';",
      "import bcrypt from 'bcrypt';",
      "import jwt from 'jsonwebtoken';",
      "import { User } from '../models/User';",
      "",
      "export const login = async (req: express.Request, res: express.Response) => {",
      "  const { username, password } = req.body;",
      "",
      "  try {",
      "    const user = await User.findByUsername(username);",
      "    ",
      "    if (!user) {",
      "      return res.status(401).json({ error: 'Invalid credentials' });",
      "    }",
      "",
      "    const isValidPassword = await bcrypt.compare(password, user.passwordHash);",
      "    ",
      "    if (!isValidPassword) {",
      "      return res.status(401).json({ error: 'Invalid credentials' });",
      "    }",
      "",
      "    const token = jwt.sign(",
      "      { userId: user.id, username: user.username },",
      "      process.env.JWT_SECRET || 'default-secret',",
      "      { expiresIn: '24h' }",
      "    );",
      "",
      "    res.json({ token, user: { id: user.id, username: user.username } });",
      "  } catch (error) {",
      "    res.status(500).json({ error: 'Login failed' });",
      "  }",
      "};",
    ],
  },
  {
    id: "19",
    title: "Type Coercion Vulnerability",
    description: "Loose equality comparison allows type coercion attacks",
    bugLines: [9, 11],
    filePath: "src/utils/permissions.ts",
    fullCode: [
      "interface User {",
      "  id: string;",
      "  role: string;",
      "  permissions: string[];",
      "  isActive: boolean;",
      "}",
      "",
      "export const hasPermission = (user: User, requiredPermission: string): boolean => {",
      "  if (user.isActive == false) {",
      "    return false;",
      "  }",
      "",
      "  if (user.role == 'admin') {",
      "    return true;",
      "  }",
      "",
      "  return user.permissions.includes(requiredPermission);",
      "};",
      "",
      "export const canAccessResource = (user: User, resourceId: string): boolean => {",
      "  if (user.id == resourceId) {",
      "    return true;",
      "  }",
      "",
      "  return hasPermission(user, 'read:all');",
      "};",
    ],
  },
  {
    id: "20",
    title: "Unencrypted Sensitive Data Storage",
    description:
      "Sensitive user data stored without encryption in local storage",
    bugLines: [11, 17],
    filePath: "src/utils/storage.tsx",
    fullCode: [
      "import React, { createContext, useContext, useEffect, useState } from 'react';",
      "",
      "interface UserData {",
      "  id: string;",
      "  email: string;",
      "  creditCard?: string;",
      "  ssn?: string;",
      "}",
      "",
      "export const saveUserData = (userData: UserData): void => {",
      "  localStorage.setItem('userData', JSON.stringify(userData));",
      "  localStorage.setItem('userEmail', userData.email);",
      "  if (userData.creditCard) {",
      "    localStorage.setItem('paymentMethod', userData.creditCard);",
      "  }",
      "  if (userData.ssn) {",
      "    localStorage.setItem('userSSN', userData.ssn);",
      "  }",
      "};",
      "",
      "export const getUserData = (): UserData | null => {",
      "  const userData = localStorage.getItem('userData');",
      "  return userData ? JSON.parse(userData) : null;",
      "};",
      "",
      "export const clearUserData = (): void => {",
      "  localStorage.removeItem('userData');",
      "  localStorage.removeItem('userEmail');",
      "  localStorage.removeItem('paymentMethod');",
      "  localStorage.removeItem('userSSN');",
      "};",
    ],
  },
];
